/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.58
 * Generated at: 2022-05-03 01:00:22 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.board;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class boardDetail_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<!DOCTYPE html>\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("<style>\r\n");
      out.write("	#modDiv{\r\n");
      out.write("	width: 480px;\r\n");
      out.write("	height: 100px;\r\n");
      out.write("	background-color: skyblue;\r\n");
      out.write("	position: absolute;\r\n");
      out.write("	top: 50%;\r\n");
      out.write("	left: 50%;\r\n");
      out.write("	margin-top: -50px;\r\n");
      out.write("	margin-left: -150px;\r\n");
      out.write("	padding: 10px;\r\n");
      out.write("	z-index: 1000;\r\n");
      out.write("	}\r\n");
      out.write("	#reply{\r\n");
      out.write("	 width: 450px;\r\n");
      out.write("	}\r\n");
      out.write("</style>\r\n");
      out.write("<!-- 부트스트랩 주소 -->\r\n");
      out.write("<link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3\" crossorigin=\"anonymous\">\r\n");
      out.write("<!-- 번들 -->\r\n");
      out.write("<script src=\"https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js\" integrity=\"sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p\" crossorigin=\"anonymous\"></script>\r\n");
      out.write("<meta charset=\"UTF-8\">\r\n");
      out.write("<title>Insert title here</title>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("	<div class=\"container\">\r\n");
      out.write("			<h1 class=\"text text-primary\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("번 글 조회중 </h1>\r\n");
      out.write("				<div class=\"row\">\r\n");
      out.write("					<div class =\"col-md-9\">\r\n");
      out.write("				 		<input type =\"text\" class=\"form-control\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.title}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class =\"col-md-3\">\r\n");
      out.write("						<input type = \"text\" class=\"form-control\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.writer }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/><br/>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				<textarea rows=\"10\" class=\"form-control\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.content }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</textarea>\r\n");
      out.write("				<div class =\"row\">\r\n");
      out.write("					<div class=\"col-md-3\">쓴날짜 : </div>\r\n");
      out.write("					<div class=\"col-md-3\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.regdate }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</div>\r\n");
      out.write("					<div class=\"col-md-3\">수정날짜 : </div>\r\n");
      out.write("					<div class=\"col-md-3\">");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.updatedate }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("</div>\r\n");
      out.write("				</div>\r\n");
      out.write("				\r\n");
      out.write("				<div class=\"row\">\r\n");
      out.write("					<div class=\"col-md-1\">\r\n");
      out.write("						<a href=\"/board/boardList/?pageNum=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.pageNum == null ? 1 : param.pageNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&searchType=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.searchType }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("&keyword=");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.keyword}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\" class=\"btn btn-success btn-sm\">글목록</a>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class =\"col-md-1\">\r\n");
      out.write("						<form action=\"/board/boardDelete\" method=\"post\">\r\n");
      out.write("							<input type =\"hidden\" name=\"bno\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.bno }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("							<input type=\"hidden\"  name=\"pageNum\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.pageNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("							<input type=\"hidden\"  name=\"searchType\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.searchType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("							<input type=\"hidden\"  name=\"keyword\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.keyword}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("							<input type=\"submit\" value=\"삭제\" class=\"btn btn-danger btn-sm\">	\r\n");
      out.write("						</form>\r\n");
      out.write("					</div>\r\n");
      out.write("					<div class = \"col-md-1\">\r\n");
      out.write("						<form action=\"/board/boardUpdateForm\" method=\"post\">\r\n");
      out.write("							<input type =\"hidden\" name=\"bno\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.bno }", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\">\r\n");
      out.write("							<input type=\"hidden\"  name=\"pageNum\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.pageNum}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("							<input type=\"hidden\"  name=\"searchType\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.searchType}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("							<input type=\"hidden\"  name=\"keyword\" value=\"");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${param.keyword}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write("\"/>\r\n");
      out.write("							<input type=\"submit\" value=\"수정\" class=\"btn btn-warning btn-sm\">	\r\n");
      out.write("		`				</form>\r\n");
      out.write("					</div>\r\n");
      out.write("				</div>\r\n");
      out.write("		\r\n");
      out.write("		<!-- 댓글영역 -->\r\n");
      out.write("		<h2>댓글</h2>\r\n");
      out.write("		<!-- 댓글이 추가될 공간 -->\r\n");
      out.write("		<div class=\"row\">\r\n");
      out.write("		<ul id=\"replies\">\r\n");
      out.write("		\r\n");
      out.write("		</ul>\r\n");
      out.write("		</div>\r\n");
      out.write("		<!-- 댓글작성 공간 -->\r\n");
      out.write("		<div class=\"row box-box-success\">\r\n");
      out.write("			<div class=\"box-header\">\r\n");
      out.write("				<h2 class=\"text-primary\">댓글작성</h2>\r\n");
      out.write("			</div><!-- header -->\r\n");
      out.write("			<div class=\"box-body\">\r\n");
      out.write("				<strong>Writer</strong>\r\n");
      out.write("				<input type=\"text\" id=\"newReplyWriter\" placeholder=\"글쓴이\" class=\"form-control\">\r\n");
      out.write("				<strong>Reply</strong>\r\n");
      out.write("				<input type=\"text\" id=\"newReplyText\" placeholder=\"댓글내용\" class=\"form-control\">\r\n");
      out.write("			</div><!-- body -->\r\n");
      out.write("			<div class=\"box-footer\">\r\n");
      out.write("				<button type=\"button\" class=\"btn btn-success\" id=\"replyAddBtn\">Add Reply</button>\r\n");
      out.write("			</div><!-- footer -->\r\n");
      out.write("		</div><!-- row -->\r\n");
      out.write("		\r\n");
      out.write("		<!-- modal은 일종의 팝업입니다. \r\n");
      out.write("		단, 새 창을 띄우지는 않고 css를 이용해 특정 태그가 조건부로 보이거나 안 보이도록 처리해서 \r\n");
      out.write("		마치 창이 새로 띄워지는것처럼 만듭니다.\r\n");
      out.write("		따라서 눈에 보이지는 않아도 modal을 구성하는 태그 자체는 화면에 미리 적혀있어야 합니다.-->\r\n");
      out.write("		<div id=\"modDiv\" style=\"display:none;\">\r\n");
      out.write("			<div class=\"modal-title\">\r\n");
      out.write("			</div>\r\n");
      out.write("			<div>\r\n");
      out.write("				<input type=\"text\" id=\"reply\">\r\n");
      out.write("			</div>\r\n");
      out.write("			<div>\r\n");
      out.write("				<button type=\"button\" id=\"replyModBtn\">수정</button>\r\n");
      out.write("				<button type=\"button\" id=\"replyDelBtn\">삭제</button>\r\n");
      out.write("				<button type=\"button\" id=\"closeBtn\">닫기</button>\r\n");
      out.write("			</div>\r\n");
      out.write("		</div>\r\n");
      out.write("	</div><!-- container -->\r\n");
      out.write("	\r\n");
      out.write("	<!-- jquery  cdn 가져오기 -->\r\n");
      out.write("	<script src=\"https://ajax.googleapis.com/ajax/libs/jquery/3.6.0/jquery.min.js\"></script>\r\n");
      out.write("	\r\n");
      out.write("	<!-- 여기부터 댓글 비동기 처리 자바스크립트 처리 영역 -->\r\n");
      out.write("	<script>\r\n");
      out.write("	var bno = ");
      out.write((java.lang.String) org.apache.jasper.runtime.PageContextImpl.proprietaryEvaluate("${board.bno}", java.lang.String.class, (javax.servlet.jsp.PageContext)_jspx_page_context, null));
      out.write(";\r\n");
      out.write("	\r\n");
      out.write("	// 댓글 전체 가져오기\r\n");
      out.write("		function getAllList(){\r\n");
      out.write("		// $.getJSON은 입력한 주소에 get방식으로 요청을 넣습니다. \r\n");
      out.write("		// 주소 // 콜백함수 주소 요청으로 얻어온 json을 어떻게 처리할지\r\n");
      out.write("		$.getJSON(\"/replies/all/\" + bno, function(data){\r\n");
      out.write("		// 문자열을 이용해 태그를 생성하거나 끼워넣을수 있으므로\r\n");
      out.write("		// 빈 문자열을 만들어놓고 거기에 댓글정보를 저장해 화면에 전송\r\n");
      out.write("		let str = \"\";\r\n");
      out.write("		\r\n");
      out.write("		// 데이터를 제대로 들고왔는지 디버깅\r\n");
      out.write("		console.log(data);\r\n");
      out.write("		\r\n");
      out.write("		// 들고 온 데이터를 반복해서 출력하기\r\n");
      out.write("		// $(JSON형식데이터).each => 내부 JSON을 향상된 for문 형식으로 처리합니다.\r\n");
      out.write("		// 역시 내부에 콜백함수(로직이 실행되었을때 추가로 실행할 구문을 정의하기위해 파라미터로 넣는 함수)\r\n");
      out.write("		// 를 이용해 data를 하나하나 향상된 for문형식으로 처리할때 실행구문을 적을 수 있습니다. \r\n");
      out.write("		$(data).each(function(){\r\n");
      out.write("			//4. 27 추가내용\r\n");
      out.write("			// 날짜 처리를 위해 자바스크립트의 Date 객체를 이용합니다.\r\n");
      out.write("			let timestamp = this.updateDate;\r\n");
      out.write("			let date = new Date(timestamp);\r\n");
      out.write("			\r\n");
      out.write("			let formattedTime = \"게시일 : \" + date.getFullYear()\r\n");
      out.write("								+ \"년\" + (date.getMonth()+1)\r\n");
      out.write("								+ \"월\" + date.getDate() +\"일\"\r\n");
      out.write("								//시분초도 추가해보세요.\r\n");
      out.write("								+ \"-\" + date.getHours()\r\n");
      out.write("								+ \"시\" + date.getMinutes()\r\n");
      out.write("								+ \"분\" + date.getSeconds() + \"초\";\r\n");
      out.write("			\r\n");
      out.write("		// 하나하나 반복되는 각 데이터는 this라는 키워드로 표현됩니다. \r\n");
      out.write("		// console.log(\"--------------------------\");\r\n");
      out.write("		// console.log(this);\r\n");
      out.write("		/*\r\n");
      out.write("		전 코드\r\n");
      out.write("		str += \"<li data-rno='\" + this.rno + \"' class='replyLi'>\"\r\n");
      out.write("		+ this.rno + \":\" + this.reply\r\n");
      out.write("		+ \"<button>수정/삭제</button></li>\"; \r\n");
      out.write("		});*/\r\n");
      out.write("		//좀더 정교하게다듬은 코드 4월27일\r\n");
      out.write("		str += \"<div class='replyLi' data-rno='\" + this.rno + \"'><strong>@\"\r\n");
      out.write("			+ this.replyer + \"</strong> - \" + formattedTime + \"<br>\"\r\n");
      out.write("			+ \"<div class='reply'>\" + this.reply + \"</div>\"\r\n");
      out.write("			+ \"<button type='button' class='btn btn-info'>수정/삭제</button>\"\r\n");
      out.write("			+ \"</div>\";\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// #replies사이에 끼워넣을수 있도록 console.log();로 디버깅\r\n");
      out.write("		console.log(str);\r\n");
      out.write("		$(\"#replies\").html(str);\r\n");
      out.write("		});\r\n");
      out.write("		}\r\n");
      out.write("		getAllList(); // 댓글 전체 들거와서 #replies에 심어주는 로직 실행\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		//댓글작성\r\n");
      out.write("		$(\"#replyAddBtn\").on(\"click\", function(){\r\n");
      out.write("		// 폼이 없기때문에, input태그 내에 입력된 요소를 가져와야 합니다.\r\n");
      out.write("		// 버튼을 누를는 시점에, 글쓴이와 내용 내부에 적힌 문자열을 변수에 저장합니다. \r\n");
      out.write("		var replyer = $(\"#newReplyWriter\").val();\r\n");
      out.write("		var reply = $(\"#newReplyText\").val();\r\n");
      out.write("		\r\n");
      out.write("		$.ajax({\r\n");
      out.write("		type : 'post',\r\n");
      out.write("		    url : '/replies',\r\n");
      out.write("		    headers: {\r\n");
      out.write("		     \"Content-Type\" : \"application/json\",\r\n");
      out.write("		     \"X-Http-Method-Override\" : \"POST\"\r\n");
      out.write("		    },\r\n");
      out.write("		    dataType : 'text',\r\n");
      out.write("		    data : JSON.stringify({\r\n");
      out.write("		bno : bno,\r\n");
      out.write("		replyer : replyer,\r\n");
      out.write("		reply : reply\r\n");
      out.write("		    }),\r\n");
      out.write("		    success : function(result){\r\n");
      out.write("		     if(result == 'SUCCESS'){\r\n");
      out.write("		    \r\n");
      out.write("		     alert(\"등록 되었습니다.\");\r\n");
      out.write("		     getAllList(); // 댓글 등록 성공시, 다시 목록 갱신\r\n");
      out.write("		     // 폼 태그 비우기. \r\n");
      out.write("		     // 힌트 : .val(넣을값)\r\n");
      out.write("		     var replyer = $(\"#newReplyWriter\").val(\"\");\r\n");
      out.write("		     var reply = $(\"#newReplyText\").val(\"\");\r\n");
      out.write("		\r\n");
      out.write("		     }\r\n");
      out.write("		    }\r\n");
      out.write("		\r\n");
      out.write("		 });\r\n");
      out.write("		\r\n");
      out.write("		}); \r\n");
      out.write("		\r\n");
      out.write("		//이벤트 위임                 .relpyLi는 생략 가능\r\n");
      out.write("		$(\"#replies\").on(\"click\", \".replyLi button\", function(){\r\n");
      out.write("		// 클릭한 요소가 this이고, 현재 button에 걸렸기 때문에\r\n");
      out.write("		// this는 button입니다. button의 부모가 바로 .replyLi입니다.\r\n");
      out.write("		// 즉, 클릭한 버튼과 연계된 li 태그를 replyteg 변수에 저장합니다. \r\n");
      out.write("		var replytag= $(this).parent();\r\n");
      out.write("		//4월27일 수정 : this(button)의 부모(.replyLi)가 아닌\r\n");
      out.write("		//형제태그 .reply의 내용을 대신 가져올 수 있도록\r\n");
      out.write("		//변수 replyContent를 선언해 거기에 저장해주세요.\r\n");
      out.write("		//(hint : .siblings(\"요소명\");으로 현제태그를 가져올 수 있습니다.)\r\n");
      out.write("		//밑에 세개 전부다 가능함 셋중 선택(개인취향)\r\n");
      out.write("		//var replyContent = $(this).prev().text();//button의 직전 태그인 .reply의 내용물 가져오기\r\n");
      out.write("		var replyContent = $(this).siblings(\".reply\").text();//button의 형제중.reply의 내용물 가져오기\r\n");
      out.write("		//var replyContent = $(this).parent().children(\".reply\").text();\r\n");
      out.write("		\r\n");
      out.write("		console.log(replytag);\r\n");
      out.write("		\r\n");
      out.write("		// 클릭한 버튼과 연계된 li태그의 data-rno에 든 값 가져와 rno에 저장하기 \r\n");
      out.write("		var rno = replytag.attr(\"data-rno\");\r\n");
      out.write("		console.log(rno);\r\n");
      out.write("		\r\n");
      out.write("		// rno뿐만 아니라 본문도 가져와야함\r\n");
      out.write("		//var reply = replytag.text(); // 내부 text를 가져옴\r\n");
      out.write("		// alert(rno + \" : \" + reply); // 내부 text와 댓글번호를 alert으로 띄움\r\n");
      out.write("		\r\n");
      out.write("		$(\".modal-title\").html(rno); // modal-title 부분에 글번호 입력\r\n");
      out.write("		$(\"#reply\").val(replyContent); // reply 영역에 리플 내용을 기입(수정/삭제)\r\n");
      out.write("		$(\"#modDiv\").show(\"slow\"); // 버튼 누르면 모달 열림\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		// 모달 창 닫기 이벤트\r\n");
      out.write("		$(\"#closeBtn\").on(\"click\", function(){ // #closeBtn 클릭시\r\n");
      out.write("		$(\"#modDiv\").hide(\"slow\"); // #modDiv를 닫습니다. \r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		\r\n");
      out.write("		// 삭제 로직\r\n");
      out.write("		$(\"#replyDelBtn\").on(\"click\", function(){\r\n");
      out.write("			let rno = $(\".modal-title\").html();\r\n");
      out.write("		$.ajax({\r\n");
      out.write("			type : 'delete',\r\n");
      out.write("			url : '/replies/' + rno,\r\n");
      out.write("			header : {\r\n");
      out.write("			\"X-HTTP-Method-Override\" : \"DELETE\"\r\n");
      out.write("		},\r\n");
      out.write("		\r\n");
      out.write("		dataType : 'text',\r\n");
      out.write("			success : function(result){\r\n");
      out.write("			console.log(\"result: \" + result);\r\n");
      out.write("				if(result == 'SUCCESS'){\r\n");
      out.write("					alert(\"삭제 되었습니다.\");\r\n");
      out.write("					$(\"#modDiv\").hide(\"slow\");\r\n");
      out.write("					getAllList(); // 삭제된 댓글 반영한 새 댓글목록 갱신\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("		//수정로직\r\n");
      out.write("		$(\"#replyModBtn\").on(\"click\", function(){\r\n");
      out.write("			let rno = $(\".modal-title\").html();\r\n");
      out.write("			let reply = $(\"#reply\").val();//댓글 내용을 가져와서 넣어줘야 수정가능\r\n");
      out.write("			\r\n");
      out.write("			$.ajax({\r\n");
      out.write("				type : 'patch',\r\n");
      out.write("				url : '/replies/' + rno,\r\n");
      out.write("				headers : {\r\n");
      out.write("					\"Content-Type\" : \"application/json\",//json자료를 추가로 입력받기때문에\r\n");
      out.write("					\"X-HTTP-Method-Override\" : \"PATCH\"\r\n");
      out.write("				},\r\n");
      out.write("				contentType: \"applocation.json\",\r\n");
      out.write("				data: JSON.stringify({reply:reply}),\r\n");
      out.write("				dataType : 'text',\r\n");
      out.write("				success : function(result){\r\n");
      out.write("					console.log(\"result: \" + result);\r\n");
      out.write("					if(result == 'SUCCESS'){\r\n");
      out.write("						alert(\"수정 되었습니다.\");\r\n");
      out.write("						$(\"#modDiv\").hide(\"slow\");\r\n");
      out.write("						getAllList();//수정된 댓글 반영한 댓글목록갱신\r\n");
      out.write("					}\r\n");
      out.write("				}\r\n");
      out.write("			});\r\n");
      out.write("		});\r\n");
      out.write("		\r\n");
      out.write("	</script>\r\n");
      out.write("	\r\n");
      out.write("\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("	\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
